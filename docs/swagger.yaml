basePath: /api/v1
definitions:
  models.APIResponse:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  models.AdjustStockRequest:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
      reason:
        type: string
      reference:
        type: string
      type:
        enum:
        - in
        - out
        - adjustment
        type: string
    required:
    - product_id
    - quantity
    - reason
    - type
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.CreateCustomerRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - email
    - name
    type: object
  models.CreateInventoryRequest:
    properties:
      location:
        type: string
      product_id:
        type: string
      quantity:
        minimum: 0
        type: integer
    required:
    - location
    - product_id
    - quantity
    type: object
  models.CreateOrderRequest:
    properties:
      customer_id:
        type: string
      discount_amount:
        type: number
      items:
        items:
          $ref: '#/definitions/models.OrderItemRequest'
        minItems: 1
        type: array
      notes:
        type: string
      tax_amount:
        type: number
    required:
    - items
    type: object
  models.CreatePaymentRequest:
    properties:
      amount:
        minimum: 0
        type: number
      order_id:
        type: string
      payment_method:
        enum:
        - cash
        - card
        - transfer
        - digital_wallet
        type: string
      reference:
        type: string
    required:
    - amount
    - order_id
    - payment_method
    type: object
  models.CreateProductRequest:
    properties:
      category_id:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      sku:
        type: string
    required:
    - category_id
    - name
    - price
    - sku
    type: object
  models.Customer:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  models.Inventory:
    properties:
      created_at:
        type: string
      id:
        type: string
      location:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.InventoryTransaction:
    properties:
      created_at:
        type: string
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        description: changed from uuid.UUID to string
        type: string
      quantity:
        type: integer
      reason:
        type: string
      reference:
        type: string
      type:
        description: '"in", "out", "adjustment"'
        type: string
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      customer:
        $ref: '#/definitions/models.Customer'
      customer_id:
        type: string
      discount_amount:
        type: number
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      notes:
        type: string
      order_number:
        type: string
      payment_status:
        description: '"pending", "paid", "refunded"'
        type: string
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      status:
        description: '"pending", "completed", "cancelled"'
        type: string
      subtotal:
        type: number
      tax_amount:
        type: number
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  models.OrderItem:
    properties:
      created_at:
        type: string
      discount:
        type: number
      id:
        type: string
      order_id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      quantity:
        type: integer
      total_price:
        type: number
      unit_price:
        type: number
    type: object
  models.OrderItemRequest:
    properties:
      discount:
        type: number
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  models.Payment:
    properties:
      amount:
        type: number
      created_at:
        type: string
      id:
        type: string
      order_id:
        type: string
      payment_method:
        description: '"cash", "card", "transfer", "digital_wallet"'
        type: string
      reference:
        type: string
      status:
        description: '"pending", "completed", "failed", "refunded"'
        type: string
      updated_at:
        type: string
    type: object
  models.Product:
    properties:
      category:
        $ref: '#/definitions/models.Category'
      category_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      updated_at:
        type: string
    type: object
  models.Receipt:
    properties:
      created_at:
        type: string
      id:
        type: string
      order:
        $ref: '#/definitions/models.Order'
      order_id:
        type: string
      receipt_number:
        type: string
      tax_amount:
        type: number
      total_amount:
        type: number
    type: object
  models.UpdateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.UpdateCustomerRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - email
    - name
    type: object
  models.UpdateInventoryRequest:
    properties:
      location:
        type: string
      quantity:
        minimum: 0
        type: integer
    required:
    - location
    - quantity
    type: object
  models.UpdateProductRequest:
    properties:
      category_id:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      sku:
        type: string
    required:
    - category_id
    - name
    - price
    - sku
    type: object
host: localhost:8080
info:
  contact:
    email: support@jatistore.local
    name: API Support
  description: RESTful API for Point of Sales (POS) system using Go, Fiber, and PostgreSQL.
    Includes inventory management, customer management, order processing, payments,
    and receipts.
  title: JatiStore POS API
  version: "2.0"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Get a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Category'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided data
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new category
      tags:
      - Categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Delete a category
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: Get a category by its unique identifier
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get category by ID
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update a category with the provided data
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update a category
      tags:
      - Categories
  /customers:
    get:
      description: Get a list of all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Customer'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a new customer with the provided information
      parameters:
      - description: Customer information
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Customer'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new customer
      tags:
      - customers
  /customers/{customerId}/orders:
    get:
      description: Get all orders for a specific customer
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get orders by customer
      tags:
      - orders
  /customers/{id}:
    delete:
      description: Delete a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Delete a customer
      tags:
      - customers
    get:
      description: Get customer details by customer ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Customer'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get a customer by ID
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update customer information by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated customer information
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Customer'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update a customer
      tags:
      - customers
  /customers/search:
    get:
      description: Search customers by name, email, or phone
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Customer'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Search customers
      tags:
      - customers
  /inventory:
    get:
      consumes:
      - application/json
      description: Get a list of all inventory records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Inventory'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all inventory records
      tags:
      - Inventory
    post:
      consumes:
      - application/json
      description: Create a new inventory record with the provided data
      parameters:
      - description: Inventory data
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/models.CreateInventoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Inventory'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new inventory record
      tags:
      - Inventory
  /inventory/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an inventory record by its ID
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Delete an inventory record
      tags:
      - Inventory
    get:
      consumes:
      - application/json
      description: Get an inventory record by its unique identifier
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Inventory'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get inventory by ID
      tags:
      - Inventory
    put:
      consumes:
      - application/json
      description: Update an inventory record with the provided data
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated inventory data
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/models.UpdateInventoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Inventory'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update an inventory record
      tags:
      - Inventory
  /inventory/adjust:
    post:
      consumes:
      - application/json
      description: Adjust inventory stock levels (in/out/adjustment)
      parameters:
      - description: Stock adjustment data
        in: body
        name: adjustment
        required: true
        schema:
          $ref: '#/definitions/models.AdjustStockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.InventoryTransaction'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Adjust inventory stock
      tags:
      - Inventory
  /orders:
    get:
      description: Get a list of all orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new sales order with items
      parameters:
      - description: Order information
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    get:
      description: Get order details by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get an order by ID
      tags:
      - orders
  /orders/{id}/payments:
    post:
      consumes:
      - application/json
      description: Process a payment for an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment information
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/models.CreatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Payment'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Process payment for an order
      tags:
      - orders
  /orders/{id}/receipt:
    post:
      description: Generate a receipt for a paid order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Receipt'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Generate receipt for an order
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order status
        in: body
        name: status
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update order status
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: Get a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided data
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Delete a product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Get a product by its unique identifier
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update a product with the provided data
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update a product
      tags:
      - Products
swagger: "2.0"

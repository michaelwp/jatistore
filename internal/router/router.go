package router

import (
	"jatistore/internal/handlers"

	_ "jatistore/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	fiberswagger "github.com/swaggo/fiber-swagger"
)

// SetupRoutes configures all the routes for the application
func SetupRoutes(app *fiber.App, handlers *Handlers) {
	// Middleware
	app.Use(recover.New())
	app.Use(logger.New())
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowHeaders: "Origin, Content-Type, Accept, Authorization",
		AllowMethods: "GET, POST, PUT, DELETE",
	}))

	// Swagger UI
	app.Get("/swagger/*", fiberswagger.WrapHandler)

	// Health check
	app.Get("/health", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{
			"status":  "ok",
			"message": "JatiStore Inventory API is running",
		})
	})

	// API routes
	api := app.Group("/api/v1")

	// Product routes
	products := api.Group("/products")
	products.Get("/", handlers.ProductHandler.GetAllProducts)
	products.Get("/:id", handlers.ProductHandler.GetProductByID)
	products.Post("/", handlers.ProductHandler.CreateProduct)
	products.Put("/:id", handlers.ProductHandler.UpdateProduct)
	products.Delete("/:id", handlers.ProductHandler.DeleteProduct)

	// Category routes
	categories := api.Group("/categories")
	categories.Get("/", handlers.CategoryHandler.GetAllCategories)
	categories.Get("/:id", handlers.CategoryHandler.GetCategoryByID)
	categories.Post("/", handlers.CategoryHandler.CreateCategory)
	categories.Put("/:id", handlers.CategoryHandler.UpdateCategory)
	categories.Delete("/:id", handlers.CategoryHandler.DeleteCategory)

	// Inventory routes
	inventory := api.Group("/inventory")
	inventory.Get("/", handlers.InventoryHandler.GetAllInventory)
	inventory.Get("/:id", handlers.InventoryHandler.GetInventoryByID)
	inventory.Post("/", handlers.InventoryHandler.CreateInventory)
	inventory.Put("/:id", handlers.InventoryHandler.UpdateInventory)
	inventory.Delete("/:id", handlers.InventoryHandler.DeleteInventory)
	inventory.Post("/adjust", handlers.InventoryHandler.AdjustStock)
}

// Handlers contains all the handlers for the application
type Handlers struct {
	ProductHandler   *handlers.ProductHandler
	CategoryHandler  *handlers.CategoryHandler
	InventoryHandler *handlers.InventoryHandler
}

// NewHandlers creates a new Handlers instance
func NewHandlers(
	productHandler *handlers.ProductHandler,
	categoryHandler *handlers.CategoryHandler,
	inventoryHandler *handlers.InventoryHandler,
) *Handlers {
	return &Handlers{
		ProductHandler:   productHandler,
		CategoryHandler:  categoryHandler,
		InventoryHandler: inventoryHandler,
	}
}

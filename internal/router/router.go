package router

import (
	"jatistore/internal/handlers"
	"jatistore/internal/middleware"

	_ "jatistore/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	fiberswagger "github.com/swaggo/fiber-swagger"
)

// SetupRoutes configures all the routes for the application
func SetupRoutes(app *fiber.App, handlers *Handlers, authMiddleware *middleware.AuthMiddleware) {
	// Middleware
	app.Use(recover.New())
	app.Use(logger.New())
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowHeaders: "Origin, Content-Type, Accept, Authorization",
		AllowMethods: "GET, POST, PUT, DELETE",
	}))

	// Swagger UI
	app.Get("/swagger/*", fiberswagger.WrapHandler)

	// Health check
	app.Get("/health", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{
			"status":  "ok",
			"message": "JatiStore Inventory API is running",
		})
	})

	// API routes
	api := app.Group("/api/v1")

	// Authentication routes (public)
	auth := api.Group("/auth")
	auth.Post("/register", handlers.AuthHandler.Register)
	auth.Post("/login", handlers.AuthHandler.Login)

	// Protected routes (require authentication)
	protected := api.Group("/", authMiddleware.Authenticate())

	// User profile routes
	authProtected := protected.Group("/auth")
	authProtected.Get("/profile", handlers.AuthHandler.GetProfile)
	authProtected.Put("/profile", handlers.AuthHandler.UpdateProfile)
	authProtected.Post("/change-password", handlers.AuthHandler.ChangePassword)

	// Admin-only routes
	adminRoutes := protected.Group("/auth", authMiddleware.RequireRole("admin"))
	adminRoutes.Get("/users", handlers.AuthHandler.GetAllUsers)
	adminRoutes.Get("/users/:id", handlers.AuthHandler.GetUserByID)
	adminRoutes.Put("/users/:id", handlers.AuthHandler.UpdateUser)
	adminRoutes.Delete("/users/:id", handlers.AuthHandler.DeleteUser)

	// Product routes (require authentication)
	products := protected.Group("/products")
	products.Get("/", handlers.ProductHandler.GetAllProducts)
	products.Get("/:id", handlers.ProductHandler.GetProductByID)
	products.Post("/", handlers.ProductHandler.CreateProduct)
	products.Put("/:id", handlers.ProductHandler.UpdateProduct)
	products.Delete("/:id", handlers.ProductHandler.DeleteProduct)

	// Category routes (require authentication)
	categories := protected.Group("/categories")
	categories.Get("/", handlers.CategoryHandler.GetAllCategories)
	categories.Get("/:id", handlers.CategoryHandler.GetCategoryByID)
	categories.Post("/", handlers.CategoryHandler.CreateCategory)
	categories.Put("/:id", handlers.CategoryHandler.UpdateCategory)
	categories.Delete("/:id", handlers.CategoryHandler.DeleteCategory)

	// Inventory routes (require authentication)
	inventory := protected.Group("/inventory")
	inventory.Get("/", handlers.InventoryHandler.GetAllInventory)
	inventory.Get("/:id", handlers.InventoryHandler.GetInventoryByID)
	inventory.Post("/", handlers.InventoryHandler.CreateInventory)
	inventory.Put("/:id", handlers.InventoryHandler.UpdateInventory)
	inventory.Delete("/:id", handlers.InventoryHandler.DeleteInventory)
	inventory.Post("/adjust", handlers.InventoryHandler.AdjustStock)

	// Customer routes (require authentication)
	customers := protected.Group("/customers")
	customers.Get("/", handlers.CustomerHandler.GetAllCustomers)
	customers.Get("/search", handlers.CustomerHandler.SearchCustomers)
	customers.Get("/:id", handlers.CustomerHandler.GetCustomer)
	customers.Post("/", handlers.CustomerHandler.CreateCustomer)
	customers.Put("/:id", handlers.CustomerHandler.UpdateCustomer)
	customers.Delete("/:id", handlers.CustomerHandler.DeleteCustomer)

	// Order routes (require authentication)
	orders := protected.Group("/orders")
	orders.Get("/", handlers.OrderHandler.GetAllOrders)
	orders.Get("/:id", handlers.OrderHandler.GetOrder)
	orders.Post("/", handlers.OrderHandler.CreateOrder)
	orders.Put("/:id/status", handlers.OrderHandler.UpdateOrderStatus)
	orders.Post("/:id/payments", handlers.OrderHandler.ProcessPayment)
	orders.Post("/:id/receipt", handlers.OrderHandler.GenerateReceipt)

	// Customer orders route (require authentication)
	protected.Get("/customers/:customerId/orders", handlers.OrderHandler.GetOrdersByCustomer)
}

// Handlers contains all the handlers for the application
type Handlers struct {
	AuthHandler      *handlers.AuthHandler
	ProductHandler   *handlers.ProductHandler
	CategoryHandler  *handlers.CategoryHandler
	InventoryHandler *handlers.InventoryHandler
	CustomerHandler  *handlers.CustomerHandler
	OrderHandler     *handlers.OrderHandler
}

// NewHandlers creates a new Handlers instance
func NewHandlers(
	authHandler *handlers.AuthHandler,
	productHandler *handlers.ProductHandler,
	categoryHandler *handlers.CategoryHandler,
	inventoryHandler *handlers.InventoryHandler,
	customerHandler *handlers.CustomerHandler,
	orderHandler *handlers.OrderHandler,
) *Handlers {
	return &Handlers{
		AuthHandler:      authHandler,
		ProductHandler:   productHandler,
		CategoryHandler:  categoryHandler,
		InventoryHandler: inventoryHandler,
		CustomerHandler:  customerHandler,
		OrderHandler:     orderHandler,
	}
}
